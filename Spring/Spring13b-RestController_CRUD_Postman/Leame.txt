Basado en
https://examples.javacodegeeks.com/enterprise-java/spring/boot/spring-boot-rest-api-tutorial/#example

Faltaria añadir en fichero aparte (ahora mismo en el controller)

@ResponseStatus(HttpStatus.NOT_FOUND)
class StudentNotFoundException extends RuntimeException {

	public StudentNotFoundException() {
		super("Student does not exist");
	}
}

===========================
Para saber de Actuators
=========================
Además se incluye Spring Actuators  (mirar pom.xml)
Si te fijas da poca informacion el /health por ser REST
Ahora miralo en un MVC (Ej 6)
/health
/info
/metrics
Actuators (info)

https://www.baeldung.com/spring-boot-actuators
https://medium.com/@lfernapalacio/qu%C3%A9-son-los-actuators-de-spring-boot-55cecb48f746

Ejemplo
localhost:8080/actuator/health
{"status":"UP"}  <--- TOdo OK

===============================
Para hacer pruebas usaremos postman
===============================
Seguir instrucciones de 
https://examples.javacodegeeks.com/enterprise-java/spring/boot/spring-boot-rest-api-tutorial/#test

========================


There are many tools available for testing REST API endpoints. 

We will use Postman in this example as it will make it easier to POST and PUT data. 
Also, Postman is a good tool to have in your arsenal if you plan to develop REST APIs.

DOwnload Postman
https://www.getpostman.com/apps
Register and open the aplication

Start Postman and close the “Create New” dialog box. 
The top portion of the window is where you select the HTTP method and enter the request URL. 
The bottom portion of the window is where the response will be displayed.

Postman is a Chrome add-on and Mac application which is used to fire requests to an API. 
It is very lightweight and fast. Requests can be organized in groups, 
also tests can be created with verifications for certain conditions on the response. 
With its features, it is very good and convenient API tool. 
It is possible to make different kinds of HTTP requests – GET, POST, PUT, PATCH and DELETE. 
It is possible to add headers to the requests


=======
SWAGGER
=======

Te permite documentar la API rest para que la usen.
Ver este ejemplo
https://dzone.com/articles/spring-boot-restful-api-documentation-with-swagger
Emplea la clase docket de la API Springfox (Automated JSON API documentation for API's built with Spring) 
